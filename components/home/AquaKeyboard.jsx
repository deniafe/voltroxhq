/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/aqua_keyboard4.glb -k
*/

import React, { useState, useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, extend } from "@react-three/fiber"
import * as THREE from 'three'
import { Shape, } from 'three'
import { Text } from '@react-three/drei'
import { motion } from 'framer-motion-3d'

const HELIX_SPEED = 6;
const BULB_SPEED = 2;

const roughGlassMaterial = new THREE.MeshPhysicalMaterial({
  color: '#ffffff',
  roughness: 0.1,
  metalness: 0.8,
  transparent: true,
  opacity: 0.8,
});

export function AquaKeyboard(props) {
  // const { nodes, materials } = useGLTF('./models/aqua_keyboard.glb')
  const { nodes, materials } = useGLTF('./models/hero_model2.glb')
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // Add a listener for changes to the screen size
    const mediaQuery = window.matchMedia("(max-width: 640px)");

    // Set the initial value of the `isMobile` state variable
    setIsMobile(mediaQuery.matches);

    // Define a callback function to handle changes to the media query
    const handleMediaQueryChange = (event) => {
      setIsMobile(event.matches);
    };

    // Add the callback function as a listener for changes to the media query
    mediaQuery.addEventListener("change", handleMediaQueryChange);

    // Remove the listener when the component is unmounted
    return () => {
      mediaQuery.removeEventListener("change", handleMediaQueryChange);
    };
  }, []);

  async function sleep(timeDiff) {
    await new Promise((resolve) => setTimeout(resolve, timeDiff * 1000));
  }

  const key0 = useRef();
  const key1 = useRef();
  const key2 = useRef();
  const bulb = useRef();

  useFrame(async (state, delta) => {
    const elapsedTime = state.clock.getElapsedTime();
    const newY = Math.sin(elapsedTime * HELIX_SPEED) * 0.5;
    const bulbY = Math.sin(elapsedTime * BULB_SPEED) * 0.8;

    bulb.current.position.y = bulbY;
  
    key0.current.position.y = newY;
    await sleep(3)
    key1.current.position.y = newY;
    await sleep(3)
    key2.current.position.y = newY
  
  });

  const width = 1.8;
  const height = 1.8;
  const cornerRadius = 0.1;

  // Create a rounded rectangle shape
  const roundedRectShape = new Shape();
  const x = 0;
  const y = 0;
  roundedRectShape.moveTo(x, y + cornerRadius);
  roundedRectShape.lineTo(x, y + height - cornerRadius);
  roundedRectShape.quadraticCurveTo(x, y + height, x + cornerRadius, y + height);
  roundedRectShape.lineTo(x + width - cornerRadius, y + height);
  roundedRectShape.quadraticCurveTo(x + width, y + height, x + width, y + height - cornerRadius);
  roundedRectShape.lineTo(x + width, y + cornerRadius);
  roundedRectShape.quadraticCurveTo(x + width, y, x + width - cornerRadius, y);
  roundedRectShape.lineTo(x + cornerRadius, y);
  roundedRectShape.quadraticCurveTo(x, y, x, y + cornerRadius);

  const textVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 2 } },
  };

  

  return (
  <group {...props} dispose={null} rotation={[Math.PI / 2.5, Math.PI / 6, - Math.PI / 24]} scale={isMobile ? [0.95, 1, 1] : [0.95, 1, 1]} position={isMobile ? [-1, -1, 0] :[-1, -1, 0]} >
    <directionalLight position={[10, 30, -10]} color="#b7daed" intensity={0.7} />
    <pointLight position={[1.5, 4, 2]} color="purple" intensity={1} />
    <pointLight position={[-2, 2, -3]} color="#219fd5" intensity={0.5} />


    <group name="Sketchfab_model" position={[1.604, -0.251, 0.451]} rotation={[-Math.PI / 2, 0, 0]} scale={[0.054, 0.068, 0.089]}>
      <group name="7a8c18d4c8df4a17afa157df7b994fb2fbx" rotation={[Math.PI / 2, 0, 0]}>
        <group name="keyboard" position={[0, 1.619, -0.017]} rotation={[0.123, 0, 0]}>
          <mesh name="keyboard_Key_0" geometry={nodes.keyboard_Key_0.geometry} material={materials['material.001']} />
          <mesh name="keyboard_Keyboard_0" geometry={nodes.keyboard_Keyboard_0.geometry} material={materials['Keyboard.001']} />
        </group>
        <group name="keys" position={[-15.094, 1.498, 2.822]} rotation={[0.123, 0, 0]}>
          <mesh ref={key0} name="keys_Key_0" geometry={nodes.keys_Key_0.geometry} material={materials['material.001']} />
          <mesh ref={key1} name="keys_Key_1" geometry={nodes.keys_Key_1.geometry} material={materials['material.001']} />
          <mesh ref={key2} name="keys_Key_2" geometry={nodes.keys_Key_2.geometry} material={materials['material.001']} />
        </group>
        <mesh name="emissive_Key_0" geometry={nodes.emissive_Key_0.geometry} material={materials['material.001']} position={[-15.094, 1.671, 2.843]} rotation={[0.123, 0, 0]} />
        <mesh name="legs_Keyboard_0" geometry={nodes.legs_Keyboard_0.geometry} material={materials['Keyboard.001']} position={[0, 0.921, -4.98]} rotation={[2.487, 0, 0]} />
      </group>
    </group>
    <group ref={bulb} name="Sketchfab_model001" position={[-0.703, 0.157, -0.302]} rotation={[-Math.PI, 0, 0]} scale={7.283}>
      <mesh name="#LMP0003_Light_Bulb_Low_Poly_#LMP0003_Textures_0" geometry={nodes['#LMP0003_Light_Bulb_Low_Poly_#LMP0003_Textures_0'].geometry} material={materials.LMP0003_Textures} position={[0, -0.031, 0]} />
    </group>

    <mesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials['Cube Black']} position={[1.604, -0.895, 0.451]} rotation={[0, 1.571, 0]} scale={[1.15, 0.4, 1.5]} />
    <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials['Cube Black']} position={[-0.883, -0.649, -0.802]} rotation={[0, 1.571, 0]} scale={[1.4, 0.4, 1]} />
    <mesh name="Cube003" geometry={nodes.Cube003.geometry} material={materials['Cube Black']} position={[1.328, 0.555, -1.544]} rotation={[0, 1.571, 0]} scale={[1.2, 0.4, 1.2]} />
    {/* Screen */}
    <mesh position={[0.3, 1.8, -2.0]} rotation={[Math.PI / 2, 0, 0]}>
      <shapeBufferGeometry args={[roundedRectShape]} />
      <meshPhysicalMaterial
        color="#ffffff"
        metalness={0.9}
        roughness={0}
        transparent
        opacity={0.7}
        envMapIntensity={1}
        reflectivity={1}
        side={THREE.DoubleSide}
      />
      <motion.group
        variants={textVariants}
        initial="hidden"
        animate="visible"
      >
        <Text
            // position={[0, 0, 0.1]} // Adjust the position of the text
            position={[0.2, 1, -0.9]}
            rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
            fontSize={0.09} // Adjust the font size of the text
            color="aqua" // Adjust the color of the text
          >
            class Voltrox:
        </Text>
      </motion.group>
       
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.55, 1.2, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
          def __init__(self, message):
        </Text>
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.6, 1.3, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
          self.message = message
        </Text>
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.55, 1.5, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
         def greet(self):
        </Text>
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.6, 1.6, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
          print(self.message)
        </Text>
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.5, 1.9, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
          {'Voltrox(\'Welcome to Voltrox\')'}
        </Text>
        <Text
          // position={[0, 0, 0.1]} // Adjust the position of the text
          position={[0.15, 2.0, -0.9]}
          rotation={[Math.PI / 1, 0, 0]} // Adjust the rotation of the text
          fontSize={0.09} // Adjust the font size of the text
          color="aqua" // Adjust the color of the text
        >
          {'.greet()'}
        </Text>

    </mesh>
   </group>
  )
}

// useGLTF.preload('./models/aqua_keyboard.glb')
useGLTF.preload('./models/hero_model2.glb')
useGLTF.preload('./models/screen.glb')
